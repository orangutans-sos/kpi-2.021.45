# Generated by Django 2.2.7 on 2020-02-25 19:49

import json
from django.contrib.postgres.fields.jsonb import JSONField as JSONBField
from django.db import migrations, models
import kpi.fields.kpi_uid
import kpi.models.asset_file
import kpi.models.import_export_task
import private_storage.fields
import private_storage.storage.s3boto3


JSON_NULL_CHAR = '\\u0000'
PYTHON_NULL_CHAR = '\0'


def eliminate_nulls(thing):
    """
    Recurse through `thing` and remove `PYTHON_NULL_CHAR` from any string
    where it appears. Python's `json.JSONEncoder` supports the iterables
    `dict`, `list`, and `tuple`, so we do too.
    """
    if isinstance(thing, dict):
        for key, value in thing.items():
            value = eliminate_nulls(value)
            if PYTHON_NULL_CHAR in key:
                fixed_key = eliminate_nulls(key)
                if fixed_key in thing:
                    raise ValueError(
                        f'key collision while removing nulls: {fixed_key}'
                    )
                thing[fixed_key] = value
                del thing[key]
            else:
                thing[key] = value
        return thing
    if isinstance(thing, list):
        for index, value in enumerate(thing):
            thing[index] = eliminate_nulls(value)
        return thing
    if isinstance(thing, tuple):
        temp_list = []
        for value in thing:
            temp_list.append(eliminate_nulls(value))
        return tuple(temp_list)
    if isinstance(thing, str):
        # yes! i have a purpose!
        return thing.replace(PYTHON_NULL_CHAR, '')
    return thing


def forwards(apps, schema_editor):
    model_fields = [
        ('Asset', '_deployment_data'),
        ('Asset', 'content'),
        ('Asset', 'summary'),
        ('AssetSnapshot', 'details'),
        ('AssetSnapshot', 'source'),
        ('ExportTask', 'data'),
        ('ExportTask', 'messages'),
        ('ImportTask', 'data'),
        ('ImportTask', 'messages'),
    ]
    print('\n {} | {}'.format('Scanned'.ljust(22), '# records need fixing'))
    for (modelname, modelfield) in model_fields:
        # e.g. Asset
        orm_model = apps.get_model('kpi', modelname)
        qparams = {('{}__contains'.format(modelfield)): JSON_NULL_CHAR}
        # e.g. Asset.objects.filter(content__contains=JSON_NULL_CHAR)
        records_with_null_chars = orm_model.objects.filter(**qparams)
        changed_records = []
        for record in records_with_null_chars:
            unfixed = getattr(record, modelfield)
            fixed = eliminate_nulls(unfixed)
            setattr(record, modelfield, fixed)
            changed_records.append(record)
        model_name_plus_field = '{}.{}'.format(modelname, modelfield).ljust(22)
        print(' {} | {}'.format(model_name_plus_field, len(changed_records)))
        if len(changed_records) > 0:
            orm_model.objects.bulk_update(changed_records, [modelfield])
    print('''
    Database is ready.
    Proceeding with migration 0024 (text -> jsonb)

    This might take a while depending on your database size.
    If it's too slow, consider stopping this and instead running
        ./manage.py migrate_json_text_to_jsonb
    to avoid downtime.
    ''')


def noop(*args, **kwargs):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('kpi', '0023_partial_permissions'),
    ]

    operations = [
        migrations.RunPython(forwards, noop),
        migrations.AlterField(
            model_name='asset',
            name='_deployment_data',
            field=JSONBField(default=dict),
        ),
        migrations.AlterField(
            model_name='asset',
            name='content',
            field=JSONBField(default=dict),
        ),
        migrations.AlterField(
            model_name='asset',
            name='summary',
            field=JSONBField(default=dict),
        ),
        migrations.AlterField(
            model_name='assetsnapshot',
            name='details',
            field=JSONBField(default=dict),
        ),
        migrations.AlterField(
            model_name='assetsnapshot',
            name='source',
            field=JSONBField(default=dict),
        ),
        migrations.AlterField(
            model_name='assetversion',
            name='_deployment_data',
            field=JSONBField(default=dict),
        ),
        migrations.AlterField(
            model_name='exporttask',
            name='data',
            field=JSONBField(),
        ),
        migrations.AlterField(
            model_name='exporttask',
            name='messages',
            field=JSONBField(default=dict),
        ),
        migrations.AlterField(
            model_name='importtask',
            name='data',
            field=JSONBField(),
        ),
        migrations.AlterField(
            model_name='importtask',
            name='messages',
            field=JSONBField(default=dict),
        ),
    ]
